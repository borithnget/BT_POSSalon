@model jotun.Models.CreatePackageViewModel

<div class="d-flex justify-content-between align-items-center mt-3">
    <h2 class="ml-4">EDIT PACKAGE</h2>
</div>

@using (Html.BeginForm("EditPackage", "Service", FormMethod.Post, new { id = "editPackageForm", enctype = "multipart/form-data" }))
{
    <div class="d-flex ml-4 w-100" style="gap: 20px;">
        <div class="form-container" style="flex: 0 0 30%; padding-right: 20px;">
            <div class="box-container p-4 border rounded shadow-sm bg-light">
                <h2 class="">Package</h2>
                @Html.AntiForgeryToken()
                <div class="form-floating mb-3">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", id = "packageName" })
                    <label for="packageName">Package Name</label>
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-floating mb-3">
                    @Html.TextBoxFor(m => m.Price, new { @class = "form-control", type = "number", step = "0.01", id = "packagePrice" })
                    <label for="packagePrice">Price</label>
                    @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
                </div>          
                <div class="form-floating mb-3">
                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = 4, id = "packageDescription" })
                    <label for="packageDescription">Description</label>
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    <input type="file" name="PackageImageFile" id="imageInput" class="form-control" accept="image/*" />
                    @if (!string.IsNullOrEmpty(Model.PackageImage))
                    {
                        <img src="~/Uploads/Package/@Model.PackageImage" id="imagePreview" alt="Current Image"
                             style="max-width: 150px; height: 150px; border: 1px solid #ccc; border-radius: 8px; margin-top: 10px;" />
                    }
                    else
                    {
                        <img id="imagePreview" src="#" alt="Image Preview" style="display:none; max-width:150px; height:150px;margin-top:10px;" />
                    }
                </div>
            </div>
            <div class="form-group">
                <label>Package Type</label>

                <div class="form-check">
                    @if (Model.SelectedServices.Count == 0 && Model.SelectedProducts.Count > 0)
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "onlyProducts", new { @class = "form-check-input", id = "onlyProducts", @checked = "checked" })
                    }
                    else
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "onlyProducts", new { @class = "form-check-input", id = "onlyProducts" })
                    }
                    <label class="form-check-label" for="onlyProducts">
                        Only Products
                    </label>
                </div>

                <div class="form-check">
                    @if (Model.SelectedServices.Count > 0 && Model.SelectedProducts.Count == 0)
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "onlyServices", new { @class = "form-check-input", id = "onlyServices", @checked = "checked" })
                    }
                    else
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "onlyServices", new { @class = "form-check-input", id = "onlyServices" })
                    }
                    <label class="form-check-label" for="onlyServices">
                        Only Services
                    </label>
                </div>

                <div class="form-check">
                    @if (Model.SelectedServices.Count > 0 && Model.SelectedProducts.Count > 0)
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "bothProductsAndServices", new { @class = "form-check-input", id = "bothProductsAndServices", @checked = "checked" })
                    }
                    else
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "bothProductsAndServices", new { @class = "form-check-input", id = "bothProductsAndServices" })
                    }
                    <label class="form-check-label" for="bothProductsAndServices">
                        Both Products and Services
                    </label>
                </div>

                <div class="form-check">
                    @if (Model.SelectedServices.Count == 0 && Model.SelectedProducts.Count == 0)
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "noProductsOrServices", new { @class = "form-check-input", id = "noProductsOrServices", @checked = "checked" })
                    }
                    else
                    {
                        @Html.RadioButtonFor(m => m.PackageType, "noProductsOrServices", new { @class = "form-check-input", id = "noProductsOrServices" })
                    }
                    <label class="form-check-label" for="noProductsOrServices">
                        No Products/Services
                    </label>
                </div>

            </div>
        </div>
        <div class="form-container" style="flex: 0 0 65%; padding-left: 20px;">
            <div class="box-container p-4 border rounded shadow-sm bg-light">
                <h3>Services & Products</h3>
                <div class="d-flex justify-content-end">
                    <button type="button" id="addServiceRow" class="btn btn-primary mb-2">
                        <i class="fa fa-plus ms-2"></i> Add Service
                    </button>
                </div>
                <div id="serviceTableContainer" style="max-height: 200px; overflow: auto;">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Service</th>
                                <th>Quantity</th>
                            </tr>
                        </thead>
                        <tbody id="serviceRows">
                            @for (int i = 0; i < Model.SelectedServices.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.DropDownListFor(model => model.SelectedServices[i].Id,
                                            new SelectList(Model.AvailableServices, "Value", "Text", Model.SelectedServices[i].Id),
                                            "-- Select Service --",
                                            new { @class = "form-control w-75 d-inline-block" /*, @id = "serviceDropdown"*/ })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.SelectedServices[i].Quantity, new { @class = "form-control w-50 d-inline-block", type = "number", min = "1" })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-end">
                    <button type="button" id="addProductRow" class="btn btn-primary mb-2">
                        <i class="fa fa-plus ms-2"></i> Add Product
                    </button>
                </div>
                <div id="productTableContainer" style="max-height: 200px; overflow: auto;">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>Quantity</th>
                                <th>Unit</th>
                                <th>Qty</th>
                            </tr>
                        </thead>
                        <tbody id="productRows">
                            @for (int i = 0; i < Model.SelectedProducts.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.DropDownListFor(model => model.SelectedProducts[i].Id,
                                            new SelectList(Model.AvailableProducts, "Value", "Text", Model.SelectedProducts[i].Id),
                                            "-- Select Product --",
                                            new { @class = "form-control w-75 d-inline-block" /*, @id = "productDropdown"*/ })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.SelectedProducts[i].Quantity, new { @class = "form-control w-50 d-inline-block", type = "number", min = "1" })
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(model => model.SelectedProducts[i].Unit,
                                            new SelectList(Model.SelectedProducts[i].AvailableUnits ?? new List<SelectListItem>
                                            {
                                                new SelectListItem { Text = "No Units Available", Value = "" }
                                            }, "Value", "Text", Model.SelectedProducts[i].Unit),
                                            "-- Select Unit --",
                                            new { @class = "form-control w-50 d-inline-block" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.SelectedProducts[i].Qty, new { @class = "form-control w-50 d-inline-block", type = "number", min = "1" })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group mt-3 ml-4">
        <button type="submit" id="updatePackageButton" class="btn btn-success">Update</button>
        <a href="@Url.Action("ListPackage", "Service")" class="btn btn-secondary">Cancel</a>
    </div>
}


<link rel="stylesheet" href="~/Content/css/site.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/Scripts/jquery-ui.js"></script>

<script type="text/javascript">
    document.getElementById("editPackageForm").addEventListener("submit", function (event) {
        var name = document.getElementById("packageName");
        var price = document.getElementById("packagePrice");
        var description = document.getElementById("packageNDescription");

        // Check if the required fields are empty
        if (!name.value.trim() || !price.value.trim() || !description.value.trim()) {
            event.preventDefault();  // Prevent form submission
            alert("Please fill out all required fields.");
        }
    });
  // Listen to changes on the radio buttons and show/hide appropriate sections
document.querySelectorAll('input[name="PackageType"]').forEach(input => {
    input.addEventListener("change", function () {
        toggleTables(this.value);
    });
});
function toggleTables(packageType) {
    var serviceTableContainer = document.getElementById("serviceTableContainer");
    var productTableContainer = document.getElementById("productTableContainer");
    var addServiceRow = document.getElementById("addServiceRow");
    var addProductRow = document.getElementById("addProductRow");

    // Enable or disable fields and hide/show sections based on packageType
    switch (packageType) {
        case "onlyProducts":
            // Hide service sections, show product sections
            serviceTableContainer.classList.add("d-none");
            productTableContainer.classList.remove("d-none");
            addServiceRow.classList.add("d-none");
            addProductRow.classList.remove("d-none");

            // Disable service-related fields to avoid form submission
            disableFields("SelectedServices");

            // Enable product-related fields
            enableFields("SelectedProducts");
            break;

        case "onlyServices":
            // Show service sections, hide product sections
            serviceTableContainer.classList.remove("d-none");
            productTableContainer.classList.add("d-none");
            addServiceRow.classList.remove("d-none");
            addProductRow.classList.add("d-none");

            // Disable product-related fields to avoid form submission
            disableFields("SelectedProducts");

            // Enable service-related fields
            enableFields("SelectedServices");
            break;

        case "bothProductsAndServices":
            // Show both service and product sections
            serviceTableContainer.classList.remove("d-none");
            productTableContainer.classList.remove("d-none");
            addServiceRow.classList.remove("d-none");
            addProductRow.classList.remove("d-none");

            // Enable both product and service fields
            enableFields("SelectedServices");
            enableFields("SelectedProducts");
            break;

        case "noProductsOrServices":
            // Hide both service and product sections
            serviceTableContainer.classList.add("d-none");
            productTableContainer.classList.add("d-none");
            addServiceRow.classList.add("d-none");
            addProductRow.classList.add("d-none");

            // Disable both product and service fields
            disableFields("SelectedServices");
            disableFields("SelectedProducts");
            break;

        default:
            break;
    }
    addDeleteButtonToRows('serviceRows');
    addDeleteButtonToRows('productRows');
}
function disableFields(prefix) {
    document.querySelectorAll(`[name^="${prefix}"]`).forEach(el => {
        el.disabled = true;
    });
}
function enableFields(prefix) {
    document.querySelectorAll(`[name^="${prefix}"]`).forEach(el => {
        el.disabled = false;
    });
}
document.getElementById('addServiceRow').addEventListener('click', function () {
    var rowCount = document.querySelectorAll("#serviceRows tr").length;
    var newRow = document.createElement('tr');
    newRow.innerHTML = `
        <td>
            <select name="SelectedServices[${rowCount}].Id" class="form-control" style="width: 300px;">
                @foreach (var service in Model.AvailableServices)
                {
                    <option value="@service.Value">@service.Text</option>
                }
            </select>
        </td>
        <td>
            <input type="number" name="SelectedServices[${rowCount}].Quantity" class="form-control" style="width: 150px;" min="1" value="1" />
        </td>
        <td>
            <button type="button" class="btn btn-danger deleteRow">
                <i class="fa fa-trash"></i>
            </button>
        </td>
    `;
    document.getElementById('serviceRows').appendChild(newRow);
    addDeleteButtonToRows('serviceRows');
});
document.getElementById('addProductRow').addEventListener('click', function () {
    var rowCount = document.querySelectorAll("#productRows tr").length;
    var newRow = document.createElement('tr');
    newRow.innerHTML = `
        <td>
            <select name="SelectedProducts[${rowCount}].Id" class="form-control product-select" style="width: 300px;">
                @foreach (var product in Model.AvailableProducts)
                {
                    <option value="@product.Value">@product.Text</option>
                }
            </select>
        </td>
        <td>
            <input name="SelectedProducts[${rowCount}].Quantity" type="number" class="form-control" style="width: 150px;" min="1" value="1" />
        </td>
         <td>
 <select name="SelectedProducts[${rowCount}].Unit" class="form-control unit-select" style="width: 300px;">
     if (Model.SelectedProducts != null && Model.SelectedProducts.Any())
     {
         @foreach (var product in Model.SelectedProducts)
         {
             if (product.AvailableUnits != null)
             {
                 foreach (var unit in product.AvailableUnits)
                 {
                     <option value="@unit.Value">@unit.Text</option>
                 }
             }
             else
             {
                 <option disabled>No Units Available</option>
             }
         }
     }
 </select>
 </td>
        <td>
            <input name="SelectedProducts[${rowCount}].Qty" type="number" class="form-control" style="width: 150px;" min="1" value="1" />
        </td>
        <td>
            <button type="button" class="btn btn-danger deleteRow">
                <i class="fa fa-trash"></i>
            </button>
        </td>
    `;
    document.getElementById('productRows').appendChild(newRow);
    addDeleteButtonToRows('productRows');
});
function addDeleteButtonToRows(tableId) {
    var rows = document.getElementById(tableId).querySelectorAll('tr');
    rows.forEach(row => {
        if (!row.querySelector('.deleteRow')) {
            var deleteButton = document.createElement('td');
            deleteButton.innerHTML = `
                <button type="button" class="btn btn-danger deleteRow">
                    <i class="fa fa-trash"></i>
                </button>
            `;
            row.appendChild(deleteButton);
        }
    });
}
    $(document).ready(function () {
    $(document).on("change", ".product-select", function () {
        var productId = $(this).val();
        var row = $(this).closest("tr");
        var unitSelect = row.find(".unit-select");

        console.log("Selected Product ID:", productId);

        if (productId) {
            $.ajax({
                url: '@Url.Action("GetAvailableUnits", "Service")',
                data: { productId: productId },
                success: function (data) {
                    unitSelect.empty();
                    unitSelect.append('<option value="">-- Select Unit --</option>');

                    $.each(data, function (i, item) {
                        unitSelect.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                    });
                }
            });
        } else {
            unitSelect.empty().append('<option value="">-- Select Unit --</option>');
        }
    });
    });
    $('#editPackageForm').submit(function () {
    $('#updatePackageButton').prop('disabled', true).text('Updating...');
    });
     $(document).ready(function () {
        // Service Dropdown with Select2
        $('#serviceDropdown').select2({
            placeholder: '-- Select Service --',
            ajax: {
                url: '@Url.Action("GetServices", "Service")',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        page: params.page || 1,  // Pagination page number
                        searchQuery: params.term   // Search query from user input
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (service) {
                            return {
                                id: service.Value,
                                text: service.Text
                            };
                        }),
                        pagination: {
                            more: data.length === 10  // If we have more results, show "next page"
                        }
                    };
                },
                cache: true
            },
            minimumInputLength: 1  // Trigger search after typing 1 character
        });

        // Product Dropdown with Select2
        $('#productDropdown').select2({
            placeholder: '-- Select Product --',
            ajax: {
                url: '@Url.Action("GetProducts", "Service")',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        page: params.page || 1,  // Pagination page number
                        searchQuery: params.term   // Search query from user input
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (product) {
                            return {
                                id: product.Value,
                                text: product.Text
                            };
                        }),
                        pagination: {
                            more: data.length === 10  
                        }
                    };
                },
                cache: true
            },
            minimumInputLength: 1 
        });
     });
    document.addEventListener("DOMContentLoaded", function () {
        const input = document.getElementById("imageInput");
        const preview = document.getElementById("imagePreview");
        if (input) {
            input.addEventListener("change", function () {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = "block";
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    });
document.addEventListener("click", function (e) {
    if (e.target && e.target.classList.contains("deleteRow")) {
        var row = e.target.closest("tr");
        row.parentNode.removeChild(row);
    }
});
toggleTables(document.querySelector('input[name="PackageType"]:checked')?.value || "noProductsOrServices");
</script>

